<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cj.netos.gateway.wallet.mapper.ChannelAccountMapper">
  <resultMap id="BaseResultMap" type="cj.netos.gateway.wallet.model.ChannelAccount">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="app_id" jdbcType="VARCHAR" property="appId" />
    <result column="mch_id" jdbcType="VARCHAR" property="mchId" />
    <result column="channel" jdbcType="VARCHAR" property="channel" />
    <result column="apply_terminal" jdbcType="VARCHAR" property="applyTerminal" />
    <result column="balance_amount" jdbcType="BIGINT" property="balanceAmount" />
    <result column="balance_utime" jdbcType="VARCHAR" property="balanceUtime" />
    <result column="limit_amount" jdbcType="BIGINT" property="limitAmount" />
    <result column="service_url" jdbcType="VARCHAR" property="serviceUrl" />
    <result column="pay_notify_url" jdbcType="VARCHAR" property="payNotifyUrl" />
    <result column="trans_notify_url" jdbcType="VARCHAR" property="transNotifyUrl" />
    <result column="key_pubtime" jdbcType="VARCHAR" property="keyPubtime" />
    <result column="key_expire" jdbcType="BIGINT" property="keyExpire" />
    <result column="use_cert" jdbcType="INTEGER" property="useCert" />
    <result column="public_key" jdbcType="VARCHAR" property="publicKey" />
    <result column="private_key" jdbcType="VARCHAR" property="privateKey" />
    <result column="api_v3_key" jdbcType="VARCHAR" property="apiV3Key" />
    <result column="mch_serial_no" jdbcType="VARCHAR" property="mchSerialNo" />
    <result column="cert_path1" jdbcType="VARCHAR" property="certPath1" />
    <result column="cert_path2" jdbcType="VARCHAR" property="certPath2" />
    <result column="cert_path3" jdbcType="VARCHAR" property="certPath3" />
    <result column="cert_path4" jdbcType="VARCHAR" property="certPath4" />
    <result column="note" jdbcType="VARCHAR" property="note" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    id, app_id, mch_id, channel, apply_terminal, balance_amount, balance_utime, limit_amount, 
    service_url, pay_notify_url, trans_notify_url, key_pubtime, key_expire, use_cert, 
    public_key, private_key, api_v3_key, mch_serial_no, cert_path1, cert_path2, cert_path3, 
    cert_path4, note
  </sql>
  <select id="selectByExample" parameterType="cj.netos.gateway.wallet.model.ChannelAccountExample" resultMap="BaseResultMap">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from channel_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    select 
    <include refid="Base_Column_List" />
    from channel_account
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    delete from channel_account
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cj.netos.gateway.wallet.model.ChannelAccountExample">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    delete from channel_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cj.netos.gateway.wallet.model.ChannelAccount">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    insert into channel_account (id, app_id, mch_id, 
      channel, apply_terminal, balance_amount, 
      balance_utime, limit_amount, service_url, 
      pay_notify_url, trans_notify_url, key_pubtime, 
      key_expire, use_cert, public_key, 
      private_key, api_v3_key, mch_serial_no, 
      cert_path1, cert_path2, cert_path3, 
      cert_path4, note)
    values (#{id,jdbcType=VARCHAR}, #{appId,jdbcType=VARCHAR}, #{mchId,jdbcType=VARCHAR}, 
      #{channel,jdbcType=VARCHAR}, #{applyTerminal,jdbcType=VARCHAR}, #{balanceAmount,jdbcType=BIGINT}, 
      #{balanceUtime,jdbcType=VARCHAR}, #{limitAmount,jdbcType=BIGINT}, #{serviceUrl,jdbcType=VARCHAR}, 
      #{payNotifyUrl,jdbcType=VARCHAR}, #{transNotifyUrl,jdbcType=VARCHAR}, #{keyPubtime,jdbcType=VARCHAR}, 
      #{keyExpire,jdbcType=BIGINT}, #{useCert,jdbcType=INTEGER}, #{publicKey,jdbcType=VARCHAR}, 
      #{privateKey,jdbcType=VARCHAR}, #{apiV3Key,jdbcType=VARCHAR}, #{mchSerialNo,jdbcType=VARCHAR}, 
      #{certPath1,jdbcType=VARCHAR}, #{certPath2,jdbcType=VARCHAR}, #{certPath3,jdbcType=VARCHAR}, 
      #{certPath4,jdbcType=VARCHAR}, #{note,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cj.netos.gateway.wallet.model.ChannelAccount">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    insert into channel_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="appId != null">
        app_id,
      </if>
      <if test="mchId != null">
        mch_id,
      </if>
      <if test="channel != null">
        channel,
      </if>
      <if test="applyTerminal != null">
        apply_terminal,
      </if>
      <if test="balanceAmount != null">
        balance_amount,
      </if>
      <if test="balanceUtime != null">
        balance_utime,
      </if>
      <if test="limitAmount != null">
        limit_amount,
      </if>
      <if test="serviceUrl != null">
        service_url,
      </if>
      <if test="payNotifyUrl != null">
        pay_notify_url,
      </if>
      <if test="transNotifyUrl != null">
        trans_notify_url,
      </if>
      <if test="keyPubtime != null">
        key_pubtime,
      </if>
      <if test="keyExpire != null">
        key_expire,
      </if>
      <if test="useCert != null">
        use_cert,
      </if>
      <if test="publicKey != null">
        public_key,
      </if>
      <if test="privateKey != null">
        private_key,
      </if>
      <if test="apiV3Key != null">
        api_v3_key,
      </if>
      <if test="mchSerialNo != null">
        mch_serial_no,
      </if>
      <if test="certPath1 != null">
        cert_path1,
      </if>
      <if test="certPath2 != null">
        cert_path2,
      </if>
      <if test="certPath3 != null">
        cert_path3,
      </if>
      <if test="certPath4 != null">
        cert_path4,
      </if>
      <if test="note != null">
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="appId != null">
        #{appId,jdbcType=VARCHAR},
      </if>
      <if test="mchId != null">
        #{mchId,jdbcType=VARCHAR},
      </if>
      <if test="channel != null">
        #{channel,jdbcType=VARCHAR},
      </if>
      <if test="applyTerminal != null">
        #{applyTerminal,jdbcType=VARCHAR},
      </if>
      <if test="balanceAmount != null">
        #{balanceAmount,jdbcType=BIGINT},
      </if>
      <if test="balanceUtime != null">
        #{balanceUtime,jdbcType=VARCHAR},
      </if>
      <if test="limitAmount != null">
        #{limitAmount,jdbcType=BIGINT},
      </if>
      <if test="serviceUrl != null">
        #{serviceUrl,jdbcType=VARCHAR},
      </if>
      <if test="payNotifyUrl != null">
        #{payNotifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="transNotifyUrl != null">
        #{transNotifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="keyPubtime != null">
        #{keyPubtime,jdbcType=VARCHAR},
      </if>
      <if test="keyExpire != null">
        #{keyExpire,jdbcType=BIGINT},
      </if>
      <if test="useCert != null">
        #{useCert,jdbcType=INTEGER},
      </if>
      <if test="publicKey != null">
        #{publicKey,jdbcType=VARCHAR},
      </if>
      <if test="privateKey != null">
        #{privateKey,jdbcType=VARCHAR},
      </if>
      <if test="apiV3Key != null">
        #{apiV3Key,jdbcType=VARCHAR},
      </if>
      <if test="mchSerialNo != null">
        #{mchSerialNo,jdbcType=VARCHAR},
      </if>
      <if test="certPath1 != null">
        #{certPath1,jdbcType=VARCHAR},
      </if>
      <if test="certPath2 != null">
        #{certPath2,jdbcType=VARCHAR},
      </if>
      <if test="certPath3 != null">
        #{certPath3,jdbcType=VARCHAR},
      </if>
      <if test="certPath4 != null">
        #{certPath4,jdbcType=VARCHAR},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cj.netos.gateway.wallet.model.ChannelAccountExample" resultType="java.lang.Long">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    select count(*) from channel_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    update channel_account
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.appId != null">
        app_id = #{record.appId,jdbcType=VARCHAR},
      </if>
      <if test="record.mchId != null">
        mch_id = #{record.mchId,jdbcType=VARCHAR},
      </if>
      <if test="record.channel != null">
        channel = #{record.channel,jdbcType=VARCHAR},
      </if>
      <if test="record.applyTerminal != null">
        apply_terminal = #{record.applyTerminal,jdbcType=VARCHAR},
      </if>
      <if test="record.balanceAmount != null">
        balance_amount = #{record.balanceAmount,jdbcType=BIGINT},
      </if>
      <if test="record.balanceUtime != null">
        balance_utime = #{record.balanceUtime,jdbcType=VARCHAR},
      </if>
      <if test="record.limitAmount != null">
        limit_amount = #{record.limitAmount,jdbcType=BIGINT},
      </if>
      <if test="record.serviceUrl != null">
        service_url = #{record.serviceUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.payNotifyUrl != null">
        pay_notify_url = #{record.payNotifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.transNotifyUrl != null">
        trans_notify_url = #{record.transNotifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.keyPubtime != null">
        key_pubtime = #{record.keyPubtime,jdbcType=VARCHAR},
      </if>
      <if test="record.keyExpire != null">
        key_expire = #{record.keyExpire,jdbcType=BIGINT},
      </if>
      <if test="record.useCert != null">
        use_cert = #{record.useCert,jdbcType=INTEGER},
      </if>
      <if test="record.publicKey != null">
        public_key = #{record.publicKey,jdbcType=VARCHAR},
      </if>
      <if test="record.privateKey != null">
        private_key = #{record.privateKey,jdbcType=VARCHAR},
      </if>
      <if test="record.apiV3Key != null">
        api_v3_key = #{record.apiV3Key,jdbcType=VARCHAR},
      </if>
      <if test="record.mchSerialNo != null">
        mch_serial_no = #{record.mchSerialNo,jdbcType=VARCHAR},
      </if>
      <if test="record.certPath1 != null">
        cert_path1 = #{record.certPath1,jdbcType=VARCHAR},
      </if>
      <if test="record.certPath2 != null">
        cert_path2 = #{record.certPath2,jdbcType=VARCHAR},
      </if>
      <if test="record.certPath3 != null">
        cert_path3 = #{record.certPath3,jdbcType=VARCHAR},
      </if>
      <if test="record.certPath4 != null">
        cert_path4 = #{record.certPath4,jdbcType=VARCHAR},
      </if>
      <if test="record.note != null">
        note = #{record.note,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    update channel_account
    set id = #{record.id,jdbcType=VARCHAR},
      app_id = #{record.appId,jdbcType=VARCHAR},
      mch_id = #{record.mchId,jdbcType=VARCHAR},
      channel = #{record.channel,jdbcType=VARCHAR},
      apply_terminal = #{record.applyTerminal,jdbcType=VARCHAR},
      balance_amount = #{record.balanceAmount,jdbcType=BIGINT},
      balance_utime = #{record.balanceUtime,jdbcType=VARCHAR},
      limit_amount = #{record.limitAmount,jdbcType=BIGINT},
      service_url = #{record.serviceUrl,jdbcType=VARCHAR},
      pay_notify_url = #{record.payNotifyUrl,jdbcType=VARCHAR},
      trans_notify_url = #{record.transNotifyUrl,jdbcType=VARCHAR},
      key_pubtime = #{record.keyPubtime,jdbcType=VARCHAR},
      key_expire = #{record.keyExpire,jdbcType=BIGINT},
      use_cert = #{record.useCert,jdbcType=INTEGER},
      public_key = #{record.publicKey,jdbcType=VARCHAR},
      private_key = #{record.privateKey,jdbcType=VARCHAR},
      api_v3_key = #{record.apiV3Key,jdbcType=VARCHAR},
      mch_serial_no = #{record.mchSerialNo,jdbcType=VARCHAR},
      cert_path1 = #{record.certPath1,jdbcType=VARCHAR},
      cert_path2 = #{record.certPath2,jdbcType=VARCHAR},
      cert_path3 = #{record.certPath3,jdbcType=VARCHAR},
      cert_path4 = #{record.certPath4,jdbcType=VARCHAR},
      note = #{record.note,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cj.netos.gateway.wallet.model.ChannelAccount">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    update channel_account
    <set>
      <if test="appId != null">
        app_id = #{appId,jdbcType=VARCHAR},
      </if>
      <if test="mchId != null">
        mch_id = #{mchId,jdbcType=VARCHAR},
      </if>
      <if test="channel != null">
        channel = #{channel,jdbcType=VARCHAR},
      </if>
      <if test="applyTerminal != null">
        apply_terminal = #{applyTerminal,jdbcType=VARCHAR},
      </if>
      <if test="balanceAmount != null">
        balance_amount = #{balanceAmount,jdbcType=BIGINT},
      </if>
      <if test="balanceUtime != null">
        balance_utime = #{balanceUtime,jdbcType=VARCHAR},
      </if>
      <if test="limitAmount != null">
        limit_amount = #{limitAmount,jdbcType=BIGINT},
      </if>
      <if test="serviceUrl != null">
        service_url = #{serviceUrl,jdbcType=VARCHAR},
      </if>
      <if test="payNotifyUrl != null">
        pay_notify_url = #{payNotifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="transNotifyUrl != null">
        trans_notify_url = #{transNotifyUrl,jdbcType=VARCHAR},
      </if>
      <if test="keyPubtime != null">
        key_pubtime = #{keyPubtime,jdbcType=VARCHAR},
      </if>
      <if test="keyExpire != null">
        key_expire = #{keyExpire,jdbcType=BIGINT},
      </if>
      <if test="useCert != null">
        use_cert = #{useCert,jdbcType=INTEGER},
      </if>
      <if test="publicKey != null">
        public_key = #{publicKey,jdbcType=VARCHAR},
      </if>
      <if test="privateKey != null">
        private_key = #{privateKey,jdbcType=VARCHAR},
      </if>
      <if test="apiV3Key != null">
        api_v3_key = #{apiV3Key,jdbcType=VARCHAR},
      </if>
      <if test="mchSerialNo != null">
        mch_serial_no = #{mchSerialNo,jdbcType=VARCHAR},
      </if>
      <if test="certPath1 != null">
        cert_path1 = #{certPath1,jdbcType=VARCHAR},
      </if>
      <if test="certPath2 != null">
        cert_path2 = #{certPath2,jdbcType=VARCHAR},
      </if>
      <if test="certPath3 != null">
        cert_path3 = #{certPath3,jdbcType=VARCHAR},
      </if>
      <if test="certPath4 != null">
        cert_path4 = #{certPath4,jdbcType=VARCHAR},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cj.netos.gateway.wallet.model.ChannelAccount">
    <!-- @mbg.generated: generated automatically, do not modify! -->
    update channel_account
    set app_id = #{appId,jdbcType=VARCHAR},
      mch_id = #{mchId,jdbcType=VARCHAR},
      channel = #{channel,jdbcType=VARCHAR},
      apply_terminal = #{applyTerminal,jdbcType=VARCHAR},
      balance_amount = #{balanceAmount,jdbcType=BIGINT},
      balance_utime = #{balanceUtime,jdbcType=VARCHAR},
      limit_amount = #{limitAmount,jdbcType=BIGINT},
      service_url = #{serviceUrl,jdbcType=VARCHAR},
      pay_notify_url = #{payNotifyUrl,jdbcType=VARCHAR},
      trans_notify_url = #{transNotifyUrl,jdbcType=VARCHAR},
      key_pubtime = #{keyPubtime,jdbcType=VARCHAR},
      key_expire = #{keyExpire,jdbcType=BIGINT},
      use_cert = #{useCert,jdbcType=INTEGER},
      public_key = #{publicKey,jdbcType=VARCHAR},
      private_key = #{privateKey,jdbcType=VARCHAR},
      api_v3_key = #{apiV3Key,jdbcType=VARCHAR},
      mch_serial_no = #{mchSerialNo,jdbcType=VARCHAR},
      cert_path1 = #{certPath1,jdbcType=VARCHAR},
      cert_path2 = #{certPath2,jdbcType=VARCHAR},
      cert_path3 = #{certPath3,jdbcType=VARCHAR},
      cert_path4 = #{certPath4,jdbcType=VARCHAR},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <select id="pageAccountBy" parameterType="cj.netos.gateway.wallet.model.ChannelAccount" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from channel_account
    where channel = #{channel,jdbcType=VARCHAR}
    and apply_terminal = #{applyTerminal,jdbcType=VARCHAR}
    order by key_pubtime desc
    limit #{offset},#{limit}
  </select>
  <select id="pageAccountOfChannel" parameterType="cj.netos.gateway.wallet.model.ChannelAccount" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from channel_account
    where channel = #{channel,jdbcType=VARCHAR}
    order by key_pubtime desc
    limit #{offset},#{limit}
  </select>
  <select id="pageAccount" parameterType="cj.netos.gateway.wallet.model.ChannelAccount" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from channel_account
    order by key_pubtime desc
    limit #{offset},#{limit}
  </select>
  <select id="pageAccountByTerminal" parameterType="cj.netos.gateway.wallet.model.ChannelAccount" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from channel_account
    where apply_terminal = #{applyTerminal,jdbcType=VARCHAR}
    order by key_pubtime desc
    limit #{offset},#{limit}
  </select>
  <select id="totalBalanceByChannel" parameterType="cj.netos.gateway.wallet.model.ChannelAccount" resultType="java.lang.Long">
    select
    coalesce(sum(balance_amount),0)
    from channel_account
    where channel = #{channel,jdbcType=VARCHAR}
  </select>
  <select id="totalAllChannelBalance" parameterType="cj.netos.gateway.wallet.model.ChannelAccount" resultType="java.lang.Long">
    select
      coalesce(sum(balance_amount),0)
    from channel_account
  </select>
</mapper>